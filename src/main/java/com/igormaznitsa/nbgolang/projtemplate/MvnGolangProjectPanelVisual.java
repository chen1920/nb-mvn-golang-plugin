package com.igormaznitsa.nbgolang.projtemplate;

import java.io.File;
import javax.swing.JFileChooser;
import javax.swing.JPanel;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.Document;
import org.netbeans.spi.project.ui.support.ProjectChooser;
import org.openide.WizardDescriptor;
import org.openide.WizardValidationException;
import org.openide.filesystems.FileUtil;

public class MvnGolangProjectPanelVisual extends JPanel implements DocumentListener {

  private static final long serialVersionUID = 6035284989362454540L;

  public static final String PROP_PROJECT_NAME = "projectName";
  public static final String PROP_ARTIFACT_ID = "artifactId";
  public static final String PROP_GROUP_ID = "groupId";
  public static final String PROP_VERSION = "version";
  public static final String PROP_PROJECT_TYPE = "projectType";

  private final MvnGolangProjectWizardPanel panel;

  public static final String STORE_PROJECT_FOLDER = "projdir";
  public static final String STORE_NAME = "name";
  public static final String STORE_ARTIFACT_ID = "artifact_id";
  public static final String STORE_GROUP_ID = "group_id";
  public static final String STORE_VERSION = "version";
  public static final String STORE_PROJECT_TYPE = "type";

  public enum ProjectType {
    SINGLE,
    MULTI, 
    NONCHOOSED
  }

  public MvnGolangProjectPanelVisual(final MvnGolangProjectWizardPanel panel) {
    initComponents();
    this.panel = panel;
    // Register listener on the textFields to make the automatic updates
    projectNameTextField.getDocument().addDocumentListener(this);
    projectLocationTextField.getDocument().addDocumentListener(this);
    textFieldArtifactid.getDocument().addDocumentListener(this);
    textFieldVersion.getDocument().addDocumentListener(this);
    textFieldGroupId.getDocument().addDocumentListener(this);

    this.radioButtonSingleModule.setSelected(true);

    this.radioButtonSingleModule.addChangeListener(new ChangeListener() {
      @Override
      public void stateChanged(ChangeEvent e) {
        panel.fireChangeEvent();
        if (radioButtonSingleModule.isSelected()) {
          firePropertyChange(PROP_PROJECT_TYPE, null, ProjectType.SINGLE);
        }
      }
    });

    this.radioMultiModuleProject.addChangeListener(new ChangeListener() {
      @Override
      public void stateChanged(ChangeEvent e) {
        panel.fireChangeEvent();
        if (radioMultiModuleProject.isSelected()) {
          firePropertyChange(PROP_PROJECT_TYPE, null, ProjectType.MULTI);
        }
      }
    });
  }

  public String getArtifactId() {
    return this.textFieldArtifactid.getText();
  }

  public String getGroupId() {
    return this.textFieldGroupId.getText();
  }

  public String getVersion() {
    return this.textFieldVersion.getText();
  }

  public String getProjectName() {
    return this.projectNameTextField.getText();
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {
    java.awt.GridBagConstraints gridBagConstraints;

    projectTypeRadioGroup = new javax.swing.ButtonGroup();
    projectNameLabel = new javax.swing.JLabel();
    projectNameTextField = new javax.swing.JTextField();
    projectLocationLabel = new javax.swing.JLabel();
    projectLocationTextField = new javax.swing.JTextField();
    browseButton = new javax.swing.JButton();
    createdFolderLabel = new javax.swing.JLabel();
    createdFolderTextField = new javax.swing.JTextField();
    filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 32767));
    filler2 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 32767));
    jLabel1 = new javax.swing.JLabel();
    jLabel2 = new javax.swing.JLabel();
    jLabel3 = new javax.swing.JLabel();
    textFieldGroupId = new javax.swing.JTextField();
    textFieldVersion = new javax.swing.JTextField();
    textFieldArtifactid = new javax.swing.JTextField();
    jPanel1 = new javax.swing.JPanel();
    filler3 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
    radioButtonSingleModule = new javax.swing.JRadioButton();
    radioMultiModuleProject = new javax.swing.JRadioButton();
    filler4 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 32767));

    setLayout(new java.awt.GridBagLayout());

    projectNameLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
    projectNameLabel.setLabelFor(projectNameTextField);
    org.openide.awt.Mnemonics.setLocalizedText(projectNameLabel, "Project &Name: ");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    add(projectNameLabel, gridBagConstraints);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1000.0;
    add(projectNameTextField, gridBagConstraints);

    projectLocationLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
    projectLocationLabel.setLabelFor(projectLocationTextField);
    org.openide.awt.Mnemonics.setLocalizedText(projectLocationLabel, "Project &Location: ");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    add(projectLocationLabel, gridBagConstraints);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    add(projectLocationTextField, gridBagConstraints);

    org.openide.awt.Mnemonics.setLocalizedText(browseButton, "Br&owse");
    browseButton.setActionCommand("BROWSE");
    browseButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        browseButtonActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
    gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 16);
    add(browseButton, gridBagConstraints);

    createdFolderLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
    createdFolderLabel.setLabelFor(createdFolderTextField);
    org.openide.awt.Mnemonics.setLocalizedText(createdFolderLabel, "Project &Folder: ");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    add(createdFolderLabel, gridBagConstraints);

    createdFolderTextField.setEditable(false);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    add(createdFolderTextField, gridBagConstraints);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
    add(filler1, gridBagConstraints);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 6;
    gridBagConstraints.gridwidth = 3;
    gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
    gridBagConstraints.weighty = 1000.0;
    add(filler2, gridBagConstraints);

    jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
    org.openide.awt.Mnemonics.setLocalizedText(jLabel1, "Artifact Id: ");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 3;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    add(jLabel1, gridBagConstraints);

    jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
    org.openide.awt.Mnemonics.setLocalizedText(jLabel2, "Group Id: ");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 4;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    add(jLabel2, gridBagConstraints);

    jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
    org.openide.awt.Mnemonics.setLocalizedText(jLabel3, "Version: ");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 5;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    add(jLabel3, gridBagConstraints);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 4;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    add(textFieldGroupId, gridBagConstraints);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 5;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    add(textFieldVersion, gridBagConstraints);

    textFieldArtifactid.setEditable(false);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 3;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    add(textFieldArtifactid, gridBagConstraints);

    jPanel1.setLayout(new java.awt.GridBagLayout());
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 10000.0;
    jPanel1.add(filler3, gridBagConstraints);

    projectTypeRadioGroup.add(radioButtonSingleModule);
    org.openide.awt.Mnemonics.setLocalizedText(radioButtonSingleModule, "Single module project");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    jPanel1.add(radioButtonSingleModule, gridBagConstraints);

    projectTypeRadioGroup.add(radioMultiModuleProject);
    org.openide.awt.Mnemonics.setLocalizedText(radioMultiModuleProject, "Multi module project");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    jPanel1.add(radioMultiModuleProject, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 6;
    gridBagConstraints.gridwidth = 3;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    add(jPanel1, gridBagConstraints);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 7;
    gridBagConstraints.weighty = 10000.0;
    add(filler4, gridBagConstraints);
  }// </editor-fold>//GEN-END:initComponents

    private void browseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseButtonActionPerformed
      String command = evt.getActionCommand();
      if ("BROWSE".equals(command)) {
        final JFileChooser chooser = new JFileChooser();
        FileUtil.preventFileChooserSymlinkTraversal(chooser, null);
        chooser.setDialogTitle("Select Project Location");
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        final String path = this.projectLocationTextField.getText();
        if (path.length() > 0) {
          File f = new File(path);
          if (f.exists()) {
            chooser.setSelectedFile(f);
          }
        }
        if (JFileChooser.APPROVE_OPTION == chooser.showOpenDialog(this)) {
          File projectDir = chooser.getSelectedFile();
          projectLocationTextField.setText(FileUtil.normalizeFile(projectDir).getAbsolutePath());
        }
        panel.fireChangeEvent();
      }

    }//GEN-LAST:event_browseButtonActionPerformed

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton browseButton;
  private javax.swing.JLabel createdFolderLabel;
  private javax.swing.JTextField createdFolderTextField;
  private javax.swing.Box.Filler filler1;
  private javax.swing.Box.Filler filler2;
  private javax.swing.Box.Filler filler3;
  private javax.swing.Box.Filler filler4;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JLabel jLabel2;
  private javax.swing.JLabel jLabel3;
  private javax.swing.JPanel jPanel1;
  private javax.swing.JLabel projectLocationLabel;
  private javax.swing.JTextField projectLocationTextField;
  private javax.swing.JLabel projectNameLabel;
  private javax.swing.JTextField projectNameTextField;
  private javax.swing.ButtonGroup projectTypeRadioGroup;
  private javax.swing.JRadioButton radioButtonSingleModule;
  private javax.swing.JRadioButton radioMultiModuleProject;
  private javax.swing.JTextField textFieldArtifactid;
  private javax.swing.JTextField textFieldGroupId;
  private javax.swing.JTextField textFieldVersion;
  // End of variables declaration//GEN-END:variables

  @Override
  public void addNotify() {
    super.addNotify();
    //same problem as in 31086, initial focus on Cancel button
    projectNameTextField.requestFocus();
  }

  boolean valid(final WizardDescriptor wizardDescriptor) {

    if (this.projectNameTextField.getText().isEmpty()) {
      wizardDescriptor.putProperty(WizardDescriptor.PROP_ERROR_MESSAGE, "Project Name is not a valid folder name.");
      return false;
    }

    final File f = FileUtil.normalizeFile(new File(this.projectLocationTextField.getText()).getAbsoluteFile());
    if (!f.isDirectory()) {
      wizardDescriptor.putProperty(WizardDescriptor.PROP_ERROR_MESSAGE, "Project Folder is not a valid path.");
      return false;
    }
    final File destFolder = FileUtil.normalizeFile(new File(createdFolderTextField.getText()).getAbsoluteFile());

    File projLoc = destFolder;
    while (projLoc != null && !projLoc.exists()) {
      projLoc = projLoc.getParentFile();
    }

    if (projLoc == null || !projLoc.canWrite()) {
      wizardDescriptor.putProperty(WizardDescriptor.PROP_ERROR_MESSAGE, "Project Folder cannot be created.");
      return false;
    }

    if (FileUtil.toFileObject(projLoc) == null) {
      wizardDescriptor.putProperty(WizardDescriptor.PROP_ERROR_MESSAGE, "Project Folder is not a valid path.");
      return false;
    }

    final File[] kids = destFolder.listFiles();
    if (destFolder.exists() && kids != null && kids.length > 0) {
      wizardDescriptor.putProperty(WizardDescriptor.PROP_ERROR_MESSAGE, "Project Folder already exists and is not empty.");
      return false;
    }

    final String groupId = this.textFieldGroupId.getText();
    if (groupId.isEmpty()) {
      wizardDescriptor.putProperty(WizardDescriptor.PROP_ERROR_MESSAGE, "Group Id must not be empty.");
      return false;
    }

    if (groupId.indexOf(' ') >= 0) {
      wizardDescriptor.putProperty(WizardDescriptor.PROP_ERROR_MESSAGE, "Group Id must not contain spaces.");
      return false;
    }

    final String version = this.textFieldVersion.getText();
    if (version.isEmpty()) {
      wizardDescriptor.putProperty(WizardDescriptor.PROP_ERROR_MESSAGE, "Version must not be empty.");
      return false;
    }

    if (version.indexOf(' ') >= 0) {
      wizardDescriptor.putProperty(WizardDescriptor.PROP_ERROR_MESSAGE, "Version must not contain spaces.");
      return false;
    }

    wizardDescriptor.putProperty("WizardPanel_errorMessage", "");
    return true;
  }

  void store(final WizardDescriptor d) {
    final String name = projectNameTextField.getText().trim();
    final String folder = createdFolderTextField.getText().trim();
    final String version = textFieldVersion.getText().trim();
    final String groupid = textFieldGroupId.getText().trim();
    final String artifactid = textFieldArtifactid.getText().trim();

    d.putProperty(STORE_PROJECT_FOLDER, new File(folder));
    d.putProperty(STORE_NAME, name);
    d.putProperty(STORE_GROUP_ID, groupid);
    d.putProperty(STORE_ARTIFACT_ID, artifactid);
    d.putProperty(STORE_VERSION, version);
    if (this.radioButtonSingleModule.isSelected()) {
      d.putProperty(STORE_PROJECT_TYPE, ProjectType.SINGLE);
    } else if (this.radioMultiModuleProject.isSelected()) {
      d.putProperty(STORE_PROJECT_TYPE, ProjectType.MULTI);
    } else {
      d.putProperty(STORE_PROJECT_TYPE, ProjectType.NONCHOOSED);
    }
  }

  void read(final WizardDescriptor settings) {
    File projectLocation = (File) settings.getProperty(STORE_PROJECT_FOLDER);
    if (projectLocation == null || projectLocation.getParentFile() == null || !projectLocation.getParentFile().isDirectory()) {
      projectLocation = ProjectChooser.getProjectsFolder();
    } else {
      projectLocation = projectLocation.getParentFile();
    }
    this.projectLocationTextField.setText(projectLocation.getAbsolutePath());

    String projectName = (String) settings.getProperty(STORE_NAME);
    if (projectName == null) {
      projectName = "mavenGolangProject";
    }
    this.projectNameTextField.setText(projectName);
    this.projectNameTextField.selectAll();

    String version = (String) settings.getProperty(STORE_VERSION);
    if (version == null) {
      version = "1.0-SNAPSHOT";
    }
    this.textFieldVersion.setText(version);

    String groupId = (String) settings.getProperty(STORE_GROUP_ID);
    if (groupId == null) {
      groupId = "";
    }
    this.textFieldGroupId.setText(groupId);

    String artifactId = (String) settings.getProperty(STORE_ARTIFACT_ID);
    if (artifactId == null) {
      artifactId = projectName;
    }
    this.textFieldArtifactid.setText(artifactId);

    final ProjectType projectType = (ProjectType)settings.getProperty(STORE_PROJECT_TYPE);
    switch(projectType) {
      case SINGLE : this.radioButtonSingleModule.setSelected(true);break;
      case MULTI : this.radioMultiModuleProject.setSelected(true);break;
    }
    
  }

  void validate(final WizardDescriptor d) throws WizardValidationException {
    // nothing to validate
  }

  private void notifyTextFieldChange(final DocumentEvent e) {
    updateTexts(e);
    if (this.projectNameTextField.getDocument() == e.getDocument()) {
      firePropertyChange(PROP_PROJECT_NAME, null, this.projectNameTextField.getText());
    } else if (this.textFieldArtifactid.getDocument() == e.getDocument()) {
      firePropertyChange(PROP_ARTIFACT_ID, null, this.textFieldArtifactid.getText());
    } else if (this.textFieldVersion.getDocument() == e.getDocument()) {
      firePropertyChange(PROP_VERSION, null, this.textFieldVersion.getText());
    } else if (this.textFieldGroupId.getDocument() == e.getDocument()) {
      firePropertyChange(PROP_GROUP_ID, null, this.textFieldGroupId.getText());
    }
  }

  // Implementation of DocumentListener --------------------------------------
  @Override
  public void changedUpdate(final DocumentEvent e) {
    notifyTextFieldChange(e);
  }

  @Override
  public void insertUpdate(final DocumentEvent e) {
    notifyTextFieldChange(e);
  }

  @Override
  public void removeUpdate(final DocumentEvent e) {
    notifyTextFieldChange(e);
  }

  /**
   * Handles changes in the Project name and project directory,
   */
  private void updateTexts(DocumentEvent e) {

    final Document doc = e.getDocument();

    if (doc == this.projectNameTextField.getDocument() || doc == this.projectLocationTextField.getDocument()) {
      // Change in the project name

      final String projectName = projectNameTextField.getText();
      this.textFieldArtifactid.setText(projectName);

      final String projectFolder = projectLocationTextField.getText();

      //if (projectFolder.trim().length() == 0 || projectFolder.equals(oldName)) {
      this.createdFolderTextField.setText(projectFolder + File.separatorChar + projectName);
      //}

      this.textFieldArtifactid.setText(projectName);
    }
    panel.fireChangeEvent(); // Notify that the panel changed
  }

}
